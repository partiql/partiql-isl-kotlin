// Documentation for using Gradle with Kotlin is here: https://kotlinlang.org/docs/reference/using-gradle.html

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.dokka' version '1.4.30'
    id 'jacoco'
    id 'org.jlleitschuh.gradle.ktlint' version '10.2.1'
}

group = "org.partiql"
version = "0.1.1-SNAPSHOT"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

repositories {
    mavenCentral()

    // jcenter required for dokka
    jcenter()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

java {
    sourceSets {
        main.java.srcDirs = ["src"]
        main.resources.srcDirs = ["resources"]
        test.java.srcDirs = ["test"]
        test.resources.srcDirs = ["test-resources"]
    }
}

kotlin {
    sourceSets {
        main.kotlin.srcDirs = ["src", "build/generated/pig/main/kotlin"]
        test.kotlin.srcDirs = ["test"]
    }
}

dependencies {
    api 'com.amazon.ion:ion-java:1.8.0'
    api 'com.amazon.ion:ion-element:1.0.0'
    api 'com.amazon.ion:ion-schema-kotlin:1.2.1'
    api 'org.partiql:partiql-ir-generator-runtime:0.5.1'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
}

tasks.dokkaHtml.configure {
    outputDirectory.set(file("$buildDir/javadoc"))
}

task sourcesJar(type: Jar) {
    from "src"
    archiveClassifier.set("sources")
}

task javadocJar(type: Jar) {
    from dokkaHtml
    archiveClassifier.set("javadoc")
}

jacocoTestReport {
    // Adjust the output of the test report
    reports {
        xml.enabled true
        csv.enabled false
    }
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
}

import org.partiql.pig.cmdline.Command
import org.partiql.pig.cmdline.TargetLanguage
import org.partiql.pig.errors.PigException

task generatePigDomains {
    group = "code generation"

    // TODO: in the future, utilize the API created as part of this ticket:
    // https://github.com/partiql/partiql-ir-generator/issues/5

    project.file("${projectDir}/build/generated/pig/main/kotlin/org/partiql/ionschema/model/").mkdirs()

    def typeUniverse = new File(projectDir, "src/org/partiql/ionschema/model/isl.ion")
    def outputFile = new File(projectDir, "build/generated/pig/main/kotlin/org/partiql/ionschema/model/")
    def targetLanguage = new TargetLanguage.Kotlin("org.partiql.ionschema.model", outputFile, null)
    def cmd = new Command.Generate(typeUniverse, targetLanguage)

    // TODO:
    // Tell gradle about the input and output of this task so that it only invokes pig when
    // the input file has changed or the output file is missing.

    doLast {
        try {
            org.partiql.pig.MainKt.generateCode(cmd)
        } catch(PigException e) {
            System.err.println("Failed to generate PIG domains: ${e.error}")
            throw new TaskExecutionException(generatePigDomains, e)
        }
    }
}

compileKotlin.dependsOn generatePigDomains

ktlint {
    filter {
        // Excludes any code in the build directory, which is assumed to be generated.
        exclude { projectDir.toURI().relativize(it.file.toURI()).path.startsWith("build") }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "partiql-isl-kotlin"

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "PartiQL ISL Kotlin"
                packaging = "jar"
                url = "https://github.com/partiql/partiql-isl-kotlin"
                description = "An object model that allows for programmatic manipulation of Ion Schema Language schemas."
                scm {
                    connection = "scm:git@github.com:partiql/partiql-isl-kotlin.git"
                    developerConnection = "scm:git@github.com:partiql/partiql-isl-kotlin.git"
                    url = "git@github.com:partiql/partiql-isl-kotlin.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "PartiQL Team"
                        email = "partiql-team@amazon.com"
                        organization = "PartiQL"
                        organizationUrl = "https://github.com/partiql"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://aws.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    // Allow publishing to maven local even if we don't have the signing keys
    // This works because when not required, the signing task will be skipped
    // if signing.keyId, signing.password, signing.secretKeyRingFile, etc are
    // not present in gradle.properties.
    required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
    sign publishing.publications.maven
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}
